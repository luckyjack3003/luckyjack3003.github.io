{"version":3,"sources":["utils/request.js","utils/globalParameters.js","services/repoService.js","components/CKRepo.js","routes/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["request","url","config","arguments","length","undefined","headers","Accept","Content-Type","axios","then","_ref","data","interceptors","response","use","error","status","message","statusText","Promise","reject","globalParameters","ckRepos","_ckRepos","apply","this","_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","concat","GlobalParameters","method","stop","columns","title","dataIndex","key","render","text","react_default","createElement","moment","Date","fromNow","icon","type","style","color","record","href","html_url","CKRepo","props","table","size","bordered","rowKey","id","dataSource","ckDataSouce","HomePage","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","loading","setState","className","components_CKRepo","Component","App","react_router_dom","react_router","path","exact","component","to","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37d46dcd.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {message} from 'antd';\r\n\r\naxios.interceptors.response.use((response) => {\r\n    return response;\r\n}, function (error) {\r\n\r\n    if (error.response.status === 401) {\r\n        message.error(error.response.statusText)\r\n    }\r\n\r\n    if (error.response.status === 500) {\r\n        message.error(error.response.statusText)\r\n    }\r\n    return Promise.reject(error.response);\r\n});\r\n\r\n\r\n\r\n/**\r\n * Requests a URL, returning a promise.\r\n *\r\n * @param  {string} url       The URL we want to request\r\n * @param  {object} [config] The options we want to pass to \"fetch\"\r\n * @return {object}           An object containing either \"data\" or \"err\"\r\n */\r\nexport default function request(url, config = {}) {\r\n\r\n    config.headers = {\r\n        'Accept': 'application/json, application/xml, text/play, text/html, *.*',\r\n        'Content-Type': 'application/json; charset=utf-8',\r\n    };\r\n\r\n    return axios(url, config)\r\n        .then(({data}) => {\r\n            return {data};\r\n        })\r\n}","export default {\r\n    url: 'https://api.github.com',\r\n};\r\n","import request from '../utils/request';\r\nimport GlobalParameters from '../utils/globalParameters';\r\n\r\nexport async function ckRepos() {\r\n    return request(`${GlobalParameters.url}/orgs/culturekings/repos`, {method: 'GET'});\r\n}\r\n","import React from 'react'\r\nimport {Table, Icon} from 'antd';\r\nimport moment from 'moment'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst columns = [\r\n    {\r\n        title: 'PROJECT NAME',\r\n        dataIndex: 'name',\r\n        key: 'name'\r\n    },\r\n    {\r\n        title: 'CREATED AT',\r\n        dataIndex: 'created_at',\r\n        key: 'created_at',\r\n        render: (text) => (\r\n            <span>\r\n                        {moment(new Date(text)).fromNow()}\r\n                    </span>\r\n        )\r\n    },\r\n    {\r\n        title: 'DESCRIPTION',\r\n        dataIndex: 'description',\r\n        key: 'description',\r\n    },\r\n    {\r\n        title: 'FORK',\r\n        key: 'fork',\r\n        dataIndex: 'fork',\r\n        render: (text) => {\r\n            if (text) {\r\n                return <Icon type=\"check\" style={{color: 'green'}}/>\r\n            } else {\r\n                return <Icon type=\"close\" style={{color: 'red'}}/>\r\n            }\r\n        },\r\n    },\r\n    {\r\n        title: 'STARGAZERS',\r\n        dataIndex: 'stargazers_count',\r\n        key: 'stargazers_count',\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n            <span>\r\n        <a href={record.html_url}>go to the repo</a>\r\n      </span>\r\n        ),\r\n    },\r\n];\r\n\r\nconst CKRepo = (props) => (\r\n    <Table\r\n        columns={columns}\r\n        size='small' bordered={true}\r\n        rowKey={(record) => {\r\n            return '' + record.id;\r\n        }}\r\n        title={() => {\r\n            return <span> {\"CULTURE KINGS REPOS\"} </span>\r\n        }}\r\n        dataSource={props.ckDataSouce}/>\r\n)\r\n\r\nCKRepo.propTypes = {\r\n\r\n    ckDataSouce: PropTypes.array.isRequired,\r\n}\r\nexport default CKRepo;","import React, {Component} from 'react'\r\nimport {ckRepos} from \"../services/repoService\";\r\nimport CKRepoComponent from '../components/CKRepo';\r\n\r\nclass HomePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ckDataSouce: [],\r\n            loading:true\r\n        };\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        let {data} = await ckRepos();\r\n        this.setState({ckDataSouce: data,loading:false})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <CKRepoComponent loading={this.state.loading} ckDataSouce={this.state.ckDataSouce}></CKRepoComponent>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HomePage;","import React from 'react'\nimport {BrowserRouter, Switch, Route, Redirect} from 'react-router-dom'\nimport HomePage from './routes/HomePage';\n\nconst App = props => (\n    <BrowserRouter>\n            <Switch>\n                <Route path=\"/\" exact={true} component={HomePage}/>\n                <Redirect to=\"/\"/>\n            </Switch>\n    </BrowserRouter>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}